package uam.mx.Servicios;

import java.util.Collection;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import uam.mx.Negocio.LlaveAccesoService;
import uam.mx.Negocio.UserService;
import uam.mx.Negocio.Dominio.LlaveAcceso;
import uam.mx.Negocio.Dominio.User;

@RestController    // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class UserRestController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserService userService;
	@Autowired
	private LlaveAccesoService llaveService;
	
	
	@RequestMapping(value="/")
	public String holaMundo() {
		return "<h1>Hola, Soy el sistema Administrador<h1>";
	}
	
	@GetMapping(path="/add") // Map ONLY GET Requests
	public ResponseEntity<User> addNewUser (@RequestParam String name
			, @RequestParam String email, @RequestParam String rol) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		//Se crea el objeto llave
		LlaveAcceso llave = new LlaveAcceso(rol);
		//Se persiste en el repositorio de llaves
		llaveService.addNewLlaveAcceso(llave);
		User n = new User(name, email, llave);
		boolean retorno = userService.addNewUser(n);
        if(retorno) {
            return new ResponseEntity<User>(n, HttpStatus.CREATED);
        } else {
            return new ResponseEntity<User>(n, HttpStatus.BAD_REQUEST);
        }
	}
	
	@GetMapping(path="/all")
	public Collection <User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userService.getUsers();
	}
}
